// Generated by CoffeeScript 1.9.1
(function() {
  var _, async, dbservice, express, fanoutFinished, makeCall, makeCallX, myobject, output, request, router, sendStatusMessage, xdate, xml;

  express = require('express');

  router = express.Router();

  xml = require('xml');

  request = require('request');

  dbservice = require('./dbservice');

  _ = require('underscore');

  async = require('async');

  xdate = require('xdate');

  output = function(res, x) {
    var xres;
    xres = xml(x, {
      declaration: {
        encoding: 'UTF-8'
      }
    });
    res.set('Content-Type', 'text/xml');
    return res.send(xres);
  };

  router.use('/callfanout-inbound', function(req, res, next) {
    return output(res, {
      Response: [
        {
          Say: "You have reached P H R I emergency notification system"
        }, {
          Redirect: 'message'
        }
      ]
    });
  });

  router.use('/message', function(req, res, next) {
    var menu;
    menu = [];
    menu._attr = {
      action: 'message-answer',
      numDigits: 1,
      timeout: 5
    };
    if (req.app.locals.fanoutInProgress === void 0) {
      menu.push({
        Say: "There are no active emergency notifications at this time. Goodbye."
      });
      return output(res, {
        Response: [
          {
            Gather: menu
          }, {
            Hangup: ''
          }
        ]
      });
    } else {
      menu.push({
        Say: 'To hear the message again, press 1'
      });
      menu.push({
        Say: 'To confirm you received and understood the message, press 0'
      });
      return output(res, {
        Response: [
          {
            Say: 'Listen carefully to the following message'
          }, {
            Play: req.app.locals.message
          }, {
            Gather: menu
          }, {
            Say: 'No response detected. Goodbye!'
          }, {
            Hangup: ''
          }
        ]
      });
    }
  });

  router.use('/message-answer', function(req, res, next) {
    var ans, recipientNumber;
    ans = req.body.Digits;
    recipientNumber = req.body.Direction === 'inbound' ? req.body.From : req.body.To;
    if (ans === '*') {
      return output(res, {
        Response: [
          {
            Redirect: 'admin-password'
          }
        ]
      });
    } else if (ans === '1') {
      return output(res, {
        Response: [
          {
            Redirect: 'message'
          }
        ]
      });
    } else if (ans === '0') {
      if (req.app.locals.fanoutInProgress) {
        req.app.locals.calls[recipientNumber].confirmed = true;
      }
      return output(res, {
        Response: [
          {
            Say: 'Thank you. Goodbye!'
          }, {
            Hangup: ''
          }
        ]
      });
    } else {
      return output(res, {
        Response: [
          {
            Say: 'Goodbye!'
          }, {
            Hangup: ''
          }
        ]
      });
    }
  });

  router.use('/fanout', function(req, res, next) {
    return output(res, {
      Response: [
        {
          Say: 'This is P H R I emergency broadcast.'
        }, {
          Redirect: 'message'
        }
      ]
    });
  });

  router.use('/admin-password', function(req, res, next) {
    var password;
    password = [];
    password._attr = {
      action: "admin-password-answer",
      numDigits: 5
    };
    return output(res, {
      Response: [
        {
          Say: "Please enter the administrator password"
        }, {
          Gather: password
        }, {
          Say: "Sorry, I didn't get that"
        }, {
          Redirect: "admin-password"
        }
      ]
    });
  });

  router.use('/admin-password-answer', function(req, res, next) {
    var ans;
    ans = req.body.Digits;
    return dbservice.verifyAdminPassword(ans, function(err) {
      if (err) {
        return output(res, {
          Response: [
            {
              Say: "That was not a valid password"
            }, {
              Redirect: "admin-password"
            }
          ]
        });
      } else {
        return output(res, {
          Response: [
            {
              Redirect: "admin-menu"
            }
          ]
        });
      }
    });
  });

  myobject = {
    firstAttre: "sdfsdf",
    slkdfjsldkf: "sfdsdsdf"
  };

  router.use('/admin-menu', function(req, res, next) {
    var e, menu;
    try {
      menu = [];
      if (req.app.locals.fanoutInProgress !== void 0) {
        menu.push({
          Say: "Call fanout is in progress. To abort now, press 0"
        });
      }
      menu.push({
        Say: "To record a new broadcast message, press 1"
      });
      return dbservice.getLastMessage(function(err, msg) {
        if (msg) {
          menu.push({
            Say: "To listen to recorded broadcast message, press 2"
          });
        }
        if (req.app.locals.fanoutInProgress === void 0 && msg) {
          menu.push({
            Say: "To trigger a call fanout, press 3"
          });
        }
        menu._attr = {
          action: 'admin-menu-answer',
          numDigits: 1
        };
        return output(res, {
          Response: [
            {
              Gather: menu
            }, {
              Say: "Sorry, I didn't get that"
            }, {
              Redirect: "admin-menu"
            }
          ]
        });
      });
    } catch (_error) {
      e = _error;
      return console.log(e);
    }
  });

  router.use('/admin-menu-answer', function(req, res, next) {
    var ans, confirmation, e, message;
    try {
      ans = req.body.Digits;
      console.log("Answer: " + ans);
      if (ans === '0') {
        console.log("Aborting fanout");
        delete req.app.locals.fanoutInProgress;
        delete req.app.locals.fanoutID;
        return output(res, {
          Response: [
            {
              Say: 'The call fanout was aborted.'
            }, {
              Redirect: 'admin-menu'
            }
          ]
        });
      } else if (ans === '2') {
        console.log("Playing back the message");
        return dbservice.getLastMessage(function(err, msg) {
          if (err) {
            console.log(err);
          }
          return output(res, {
            Response: [
              {
                Play: msg.url
              }, {
                Redirect: "admin-menu"
              }
            ]
          });
        });
      } else if (ans === '1') {
        console.log("Recording new message");
        message = [];
        message._attr = {
          action: 'admin-recorded',
          maxLength: 60 * 5
        };
        return output(res, {
          Response: [
            {
              Say: 'Record your message now, then press any key when finished'
            }, {
              Record: message
            }, {
              Say: "Sorry, I didn't get that"
            }, {
              Redirect: 'admin-menu'
            }
          ]
        });
      } else if (ans === '3') {
        console.log("Initiating call fanout");
        confirmation = [
          {
            Say: 'Press 0 to proceed'
          }, {
            Say: 'Press 1 to abort'
          }
        ];
        confirmation._attr = {
          action: 'admin-start-fanout-confirm',
          numDigits: 1
        };
        return output(res, {
          Response: [
            {
              Say: 'Call fanout is about to begin.'
            }, {
              Gather: confirmation
            }, {
              Say: "Sorry, I didn't get that. Call fanout was not initiated"
            }, {
              Redirect: 'admin-menu'
            }
          ]
        });
      } else {
        return output(res, {
          Response: [
            {
              Say: 'An error has occurred'
            }, {
              Redirect: 'admin-menu'
            }
          ]
        });
      }
    } catch (_error) {
      e = _error;
      console.log(e);
      return output(res, {
        Response: [
          {
            Say: 'An error has occurred'
          }, {
            Redirect: 'admin-menu'
          }
        ]
      });
    }
  });

  router.use('/admin-start-fanout-confirm', function(req, res, next) {
    var ans, apiURL;
    ans = req.body.Digits;
    if (ans === '0') {
      req.app.locals.calls = {};
      req.app.locals.fanoutInProgress = true;
      req.app.locals.fanoutSummaryNumber = req.body.From;
      req.app.locals.fanoutStartTime = new Date();
      dbservice.newFanout(function(err, result) {
        return req.app.locals.fanoutID = result.insertId;
      });
      dbservice.getLastMessage(function(err, message) {
        return req.app.locals.message = message.url;
      });
      if (req.body.AccountSid === void 0) {
        req.body.AccountSid = 'AC8b3510dfe729785e2fa921c066ae4586';
      }
      if (req.body.to === void 0) {
        req.body.to = '2897685694';
      }
      apiURL = "https://api.twilio.com/2010-04-01/Accounts/" + req.body.AccountSid + "/Calls";
      req.app.locals.callsInProgress = 0;
      return dbservice.getAllPeople(function(err, recipients, fields) {
        var message;
        setTimeout(function() {
          return async.each(recipients, function(rec, cb) {
            var number;
            number = rec.number;
            return makeCall(apiURL, req.body.to, number, 'fanout', 'call-status', function(error, response, body) {
              if (error) {
                console.log("Call to " + rec.name + " at " + rec.number + " failed: " + error);
              } else {
                console.log("Calling " + rec.name + " at " + rec.number);
                req.app.locals.calls[number] = {
                  confirmed: false,
                  completed: false
                };
              }
              return cb();
            });
          }, function(err) {});
        }, 5000);
        if (recipients.length > 0) {
          message = 'Call fanout was started. You will recieve a text message with results when it completes. Goodbye';
        } else {
          message = 'No destination numbers were configured for fanout. Aborting. Goodbye';
        }
        return output(res, {
          Response: [
            {
              Say: message
            }, {
              Hangup: ''
            }
          ]
        });
      });
    } else if (ans === '1') {
      return output(res, {
        Response: [
          {
            Say: 'Call fanout was NOT started.'
          }, {
            Redirect: 'admin-menu'
          }
        ]
      });
    } else {
      return output(res, {
        Response: [
          {
            Say: 'There was an error'
          }, {
            Redirect: 'admin-menu'
          }
        ]
      });
    }
  });

  router.use('/admin-recorded', function(req, res, next) {
    var rec;
    rec = req.body.RecordingUrl;
    console.log("Recording URL: " + rec);
    return dbservice.newMessage(rec, function(err) {
      if (err) {
        console.log(err);
        return output(res, {
          Response: [
            {
              Say: 'There was an error'
            }, {
              Redirect: 'admin-menu'
            }
          ]
        });
      } else {
        return output(res, {
          Response: [
            {
              Say: "Your message was recorded."
            }, {
              Redirect: 'admin-menu'
            }
          ]
        });
      }
    });
  });

  makeCallX = function(apiURL, from, to, url, callback) {
    console.log("Making a call via " + apiURL + " from " + from + " to " + to + ", redirecting to '" + url + "'");
    return callback();
  };

  makeCall = function(apiURL, from, to, url, statusUrl, callback) {
    var accountSID, authToken, twilio;
    accountSID = 'AC8b3510dfe729785e2fa921c066ae4586';
    authToken = 'bdc7f50dbc9ce7997d032a0e6c16c9b0';
    twilio = require('twilio')(accountSID, authToken);
    return twilio.calls.create({
      to: to,
      from: from,
      url: 'http://www.gamedealalerts.com:3000/fanout',
      statusCallback: 'http://www.gamedealalerts.com:3000/call-status'
    }, function(err, call) {
      if (err) {
        console.log(err);
      } else {

      }
      return callback();
    });
  };

  router.use('/call-status', function(req, res, next) {
    var calls, confirmed, duration, number, status;
    number = req.body.To;
    duration = req.body.CallDuration;
    status = req.body.CallStatus;
    console.log("Call to " + number + ": duration: " + duration + "; status: " + status);
    if (req.app.locals.fanoutInProgress) {
      calls = req.app.locals.calls;
      calls[number].completed = true;
      confirmed = calls[number].confirmed;
      dbservice.registerCall(req.app.locals.fanoutID, number, status, confirmed, function(err) {
        if (err) {
          return console.log(err);
        } else if (fanoutFinished(calls)) {
          sendStatusMessage(req.app.locals.fanoutSummaryNumber, req.app.locals.fanoutID);
          return req.app.locals.fanoutInProgress = false;
        }
      });
    }
    return res.send('ok');
  });

  router.use('/incoming-call-status', function(req, res, next) {
    return res.send('ok');
  });

  router.use('/fanout-summary', function(req, res, next) {
    var fanoutID, number;
    fanoutID = req.body.FanoutID;
    number = req.body.number;
    if (fanoutID) {
      sendStatusMessage(number, fanoutID);
    }
    return res.send('ok');
  });

  fanoutFinished = function(calls) {
    var key, value;
    for (key in calls) {
      value = calls[key];
      if (value.completed === false) {
        return false;
      }
    }
    return true;
  };

  sendStatusMessage = function(number, fanoutID) {
    return dbservice.getFanoutSummary(fanoutID, function(err, summary) {
      var accountSID, authToken, body, call, fanoutTime, i, len, ref, twilio;
      if (err) {
        return console.log(err);
      } else {
        fanoutTime = new xdate(summary.fanout.dateStarted).toString('yyyy MMM dd, HH:mm');
        body = "Call Fanout Summary\nInitiated: " + fanoutTime + "\n";
        ref = summary.calls;
        for (i = 0, len = ref.length; i < len; i++) {
          call = ref[i];
          body += call.name + ": " + call.status + ", " + (call.confirmed === '1' ? 'confirmed' : 'not confirmed') + "\n";
        }
        console.log(body);
        accountSID = 'AC8b3510dfe729785e2fa921c066ae4586';
        authToken = 'bdc7f50dbc9ce7997d032a0e6c16c9b0';
        twilio = require('twilio')(accountSID, authToken);
        return twilio.messages.create({
          to: number,
          from: '+12897685694',
          body: body
        }, function(err, call) {
          if (err) {
            return console.log(err);
          }
        });
      }
    });
  };

  module.exports = router;

}).call(this);
